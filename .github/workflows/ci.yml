name: CI

on:
  pull_request:       # trigger on pull requests
  push:
    branches:         # array of glob patterns matching against refs/heads. Optional; defaults to all
      - main

env:
  # Could, potentially automatically parse
  # the bin name, but let's do it automatically for now.
  ARTIFACT_BIN: cbsh
  ARTIFACT_BIN_WINDOWS: cbsh.exe

  # Space separated paths to include in the archive.
  # Start relative paths with a dot if you don't want
  # paths to be preserved. Use "/" as a delimiter.
  ARTIFACT_ADDS: README.md LICENSE LICENSE_AGREEMENT NOTICES

jobs:
  build:
    name: Build

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, aarch64-linux-gnu, macos, aarch64-macos, windows]
        include:
          - build: linux
            os: ubuntu-22.04
            rust: stable
          - build: aarch64-linux-gnu
            os: ubuntu-22.04
            rust: stable
          - build: aarch64-macos
            os: macos-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable

    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy
    - uses: Swatinem/rust-cache@v2
      with:
        key: "v1"

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose
      if: matrix.os != 'windows-latest'

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose
      env:
        VCPKGRS_DYNAMIC: 1
        RUSTFLAGS: -Ctarget-feature=+crt-static
      if: matrix.os == 'windows-latest'

#    - name: Clippy
#      uses: actions-rs/clippy@master
#      with:
#        args: --all-features -- -D warnings

#    - name: Test
#      uses: actions-rs/cargo@v1
#      with:
#        command: test
#        args: --verbose

    - name: Create archive for Linux
      id: createarchivelinux
      run: |
        7z a -ttar -so -an ./target/debug/${{ env.ARTIFACT_BIN }} ${{ env.ARTIFACT_ADDS }} | 7z a -si ${{ env.ARTIFACT_BIN }}-${{ matrix.build }}.tar.gz
      if: matrix.os == 'ubuntu-22.04'

    - name: Install p7zip
      # 7Zip not available on MacOS, install p7zip via homebrew.
      run: brew install p7zip
      if: matrix.os == 'macos-latest'

    - name: Create archive for MacOS
      id: createarchivemacos
      run: |
        7z a -tzip ${{ env.ARTIFACT_BIN }}-${{ matrix.build }}.zip ./target/debug/${{ env.ARTIFACT_BIN }} ${{ env.ARTIFACT_ADDS }}
      if: matrix.os == 'macos-latest'

    - name: Create archive for Windows
      id: createarchivewindows
      run: |
        choco install 7zip
        7z a -tzip ${{ env.ARTIFACT_BIN }}-${{ matrix.build }}.zip ./target/debug/${{ env.ARTIFACT_BIN_WINDOWS }} ${{ env.ARTIFACT_ADDS }}
      if: matrix.os == 'windows-latest'

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_BIN }}-${{ matrix.build }}
        path: ${{ env.ARTIFACT_BIN }}-${{ matrix.build }}*
        if-no-files-found: error

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
