
on: workflow_dispatch

name: Create Release

env:
  # Could, potentially automatically parse
  # the bin name, but let's do it automatically for now.
  RELEASE_BIN: cbsh
  RELEASE_BIN_WINDOWS: cbsh.exe

  # Space separated paths to include in the archive.
  # Start relative paths with a dot if you don't want
  # paths to be preserved. Use "/" as a delimiter.
  RELEASE_ADDS: README.md LICENSE LICENSE_AGREEMENT NOTICES
  RELEASE_ADDS_WINDOWS: README.md,LICENSE,LICENSE_AGREEMENT,NOTICES


jobs:
  build:
    name: Build release

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin, x86_64-pc-windows-msvc]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    outputs:
      version: ${{ steps.version.outputs.value }}

    steps:
    - uses: actions/checkout@v3

    - name: Update Rust Toolchain Target
      run: |
        echo "targets = ['${{matrix.target}}']" >> rust-toolchain.toml

    - name: Setup Rust toolchain and cache
      uses: actions-rust-lang/setup-rust-toolchain@v1.4.3

    - name: Install aarch64-linux gcc
      run: sudo apt-get install gcc-aarch64-linux-gnu -y
      if: matrix.target == 'aarch64-unknown-linux-gnu'

    - uses: SebRollen/toml-action@v1.0.1
      id: version
      with:
        file: 'Cargo.toml'
        field: 'package.version'

    - name: Build
      uses: actions-rs/cargo@v1
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: 'aarch64-linux-gnu-gcc'
      with:
        command: build
        args: --verbose --release --target ${{ matrix.target }}
      if: matrix.os != 'windows-latest'

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --release
      env:
        VCPKGRS_DYNAMIC: 1
        RUSTFLAGS: -Ctarget-feature=+crt-static
      if: matrix.os == 'windows-latest'

#    - name: Test
#      uses: actions-rs/cargo@v1
#      with:
#        command: test
#        args: --verbose

    - name: Create archive for Linux
      id: createarchivelinux
      run: |
        7z a -ttar -so -an ./target/release/${{ env.RELEASE_BIN }} ${{ env.RELEASE_ADDS }} | 7z a -si ${{ env.RELEASE_BIN }}-${{ matrix.target }}.tar.gz
      if: matrix.os == 'ubuntu-22.04'

    - name: Install p7zip
      # 7Zip not available on MacOS, install p7zip via homebrew.
      run: brew install p7zip
      if: matrix.os == 'macos-latest'

    - name: Create archive for MacOS
      id: createarchivemacos
      run: |
        7z a -tzip ${{ env.RELEASE_BIN }}-${{ matrix.target }}.zip ./target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }} ${{ env.RELEASE_ADDS }}
      if: matrix.os == 'macos-latest'

    - name: Create archive for Windows
      id: createarchivewindows
      run: |
        choco install 7zip
        7z a -tzip ${{ env.RELEASE_BIN }}-${{ matrix.target }}.zip ./target/release/${{ env.RELEASE_BIN_WINDOWS }} ${{ env.RELEASE_ADDS }}
      if: matrix.os == 'windows-latest'

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RELEASE_BIN }}-${{ matrix.target }}
        path: ${{ env.RELEASE_BIN }}-${{ matrix.target }}*
        if-no-files-found: error

  release:
    needs: [build]
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Create tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ needs.build.outputs.version }}
          default_bump: false
          create_annotated_tag: true

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Add Artifacts to Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.RELEASE_BIN }}*/*
          tag_name: v${{ needs.build.outputs.version }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release v${{ needs.build.outputs.version }}
          fail_on_unmatched_files: true
          body: ${{ steps.tag_version.changelog }}
